package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Console;

public class ConsoleManager {

	private Connection connection;
	
	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	
	private String createTableConsole = "CREATE TABLE Console(id_console int GENERATED BY DEFAULT AS IDENTITY, name varchar(20), brand varchar(20), premiere int, price decimal(6,2))";
	
	private PreparedStatement addConsole;
	private PreparedStatement deleteAllConsoles;
	private PreparedStatement getAllConsoles;
	
	private Statement statement;
	
	public ConsoleManager(){
		try{
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();
			
			ResultSet resultSet = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			
			while(resultSet.next()){
				if("Console".equalsIgnoreCase(resultSet.getString("TABLE_NAME"))){
					tableExists = true;
					break;
				}
			}
			
			if(!tableExists){
				statement.executeUpdate(createTableConsole);
			}
			
			addConsole = connection.prepareStatement("INSERT INTO Console (name, brand, premiere, price) VALUES (?, ?, ?, ?)");
			deleteAllConsoles = connection.prepareStatement("DELETE FROM Console");
			getAllConsoles = connection.prepareStatement("SELECT * FROM Console");
		}catch(SQLException exception){
			exception.printStackTrace();
		}
	}
	
	Connection getConnection(){
		return connection;
	}
	
	void clearConsoles(){
		try{
			deleteAllConsoles.executeUpdate();
			
		}catch(SQLException exception){
			exception.printStackTrace();
		}
	}
	
	public int addConsole(Console console){
		int count = 0;
		
		try{
			addConsole.setString(1, console.getName());
			addConsole.setBrand(2, console.getBrand());
			addConsole.setInt(3, console.getPremiere());
			addConsole.setDouble(4, console.getPrice());
		}catch(SQLException exception){
			exception.printStackTrace();
		}
		
		return count;
	}
	
	public List<Console> getAllConsoles(){
		List<Console> consoles = new ArrayList<Console>();
		
		try{
			ResultSet resultSet = getAllConsoles.executeQuery();
			
			while(resultSet.next()){
				Console console = new Console();
				console.setId(resultSet.getInt("id"));
				console.setName(resultSet.getString("name"));
				console.setBrand(resultSet.getString("brand"));
				console.setPremiere(resultSet.getInt("premiere"));
				console.setPrice(resultSet.getDouble("price"));
			}
		}catch(SQLException exception){
			exception.printStackTrace();
		}
		return consoles;
	}
	
	//@Override
	public void addAllConsoles(List<Console> consoles){
		try{
			connection.setAutoCommit(false);
			for(Console console : consoles){
				addConsole.setString(1, console.getName());
				addConsole.setBrand(2, console.getBrand());
				addConsole.setInt(3, console.getPremiere());
				addConsole.setDouble(4, console.getPrice());
			}
			connection.commit();
		} catch(SQLException exception){
			try{
				connection.rollback();
			} catch(SQLException alarm){
				alarm.printStackTrace();
			}
		}
	}
	
}
